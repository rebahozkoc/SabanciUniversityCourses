(display "COMPILED")
(display "\nget-area '(3 3 6):\n")
(display (get-area '(3 3 6)))
(display "\nget-area '(3 4 5):\n")
(display (get-area '(3 4 5)))
(display "\nget-area '(12 35 37):\n")
(display (get-area '(12 35 37)))
;(display "\nmerge '(2 5) '(1 4):\n")
;(display (merge '(2 5) '(1 4) (lambda (x y) (< x y)) ))
;(display "\n(sub-list '(0 1 2 3 4) 1 3):\n")
;(display (sub-list '(0 1 2 3 4) 1 3))
;(display "\n(sub-list '(0 1 2 3 4) 1 1):\n")
;(display (sub-list '(0 1 2 3 4) 1 1))
(display "\n(quotient 9 2):\n")
(display (quotient 9 2))
;(display "\n(n-length-list '() 0)\n")
;(display (n-length-list '() 0))
;(display "\n(merge-sort '(2 1 4 0)):\n")
;(display (merge-sort '(2 1 4 0) (lambda (x y) (< x y))))
;(display "\n(merge-sort '()):\n")
;(display (merge-sort '() (lambda (x y) (< x y))))
;(display "\n(merge-sort '(1)):\n")
;(display (merge-sort '(1) (lambda (x y) (< x y))))
(display "\n(pythagorean-triangle? '(3 4 5)):\n")
(display (pythagorean-triangle? '(3 4 5)))
(display "\n(pythagorean-triangle? '(3 3 5)):\n")
(display (pythagorean-triangle? '(3 3 5)))
(display "\n(triangle? '(3 3 5)):\n")
(display (triangle? '(3 3 5)))
(display "\n(triangle? '(3 3 6)):\n")
(display (triangle? '(3 3 6)))
(display "\n(check-sides? '(3.4 4 5)):\n")
(display (check-sides? '(3.4 4 5)))
(display "\n(check-sides? '(6 4 27)):\n")
(display (check-sides? '(6 4 27)))
(display "\n(check-sides? '(6 0 27)):\n")
(display (check-sides? '(6 0 27)))
(display "\n(check-sides? '(() 'c 3)):\n")
(display (check-sides? '(() 'c 3)))
(display "\n(check-sides? '(#t 10 14)):\n")
(display (check-sides? '(#t 10 14)))
(display "\n(check-length? '('a 'bc) 2)):\n")
(display (check-length? '('a 'bc) 2))
(display "\n(check-length? '('a 'bc) 2)):\n")
(display (check-length? '('a 'bc) 2))
(display "\n(check-length? '(3 4 5) 3)):\n")
(display (check-length? '(3 4 5) 3))
(display "\n(check-length? '(2 3 4 5) 3)):\n")
(display (check-length? '(2 3 4 5) 3))
(display "\n(check-length? '(3 4 5) 4)):\n")
(display (check-length? '(3 4 5) 4))
(display "\n(check-triple? '((1 2) (3 4 5))):\n")
(display (check-triple? '((1 2) (3 4 5))))
(display "\n(check-triple? '((5 12 12) (6 6 6) ())):\n")
(display (check-triple? '((5 12 12) (6 6 6) ())))
(display "\n(check-triple? '((5 3 9) (9 55 32) ('a 28 67))):\n")
(display (check-triple? '((5 3 9) (9 55 32) ('a 28 67))))
(display "\n(check-triple? '((5 12 13) (3 4 5) (16 63 65) (12 35 37))):\n")
(display (check-triple? '((5 12 13) (3 4 5) (16 63 65) (12 35 37))))
(display "\n(check-triple? '((5.4 12 13) (3 4 5) (16 63 65) (12 35 37))):\n")
(display (check-triple? '((5.4 12 13) (3 4 5) (16 63 65) (12 35 37))))
(display "\n(sort-triple '(4 3 5)):\n")
(display (sort-triple '(4 3 5)))
(display "\n(sort-triple '(8 8 8)):\n")
(display (sort-triple '(8 8 8)))
(display "\n(sort-triple '(6 10 14)):\n")
(display (sort-triple '(6 10 14)))
(display "\n(sort-all-triples '((4 3 5) (9 4 6) (13 12 1) (6 6 6))):\n")
(display (sort-all-triples '((4 3 5) (9 4 6) (13 12 1) (6 6 6))))
(display "\n(sort-all-triples '((4 7 9) (15 36 9))):\n")
(display (sort-all-triples '((4 7 9) (15 36 9))))
(display "\n(filter-triangle '((3 4 5) (4 6 9) (1 12 13))):\n")
(display (filter-triangle '((3 4 5) (4 6 9) (1 12 13))))
(display "\n(filter-triangle '((3 4 5) (4 6 9) (1 12 13))):\n")
(display (filter-triangle '((8 10 21) (22 31 53))))
(display "\n(filter-triangle '())):\n")
(display (filter-triangle '()))
(display "\n(filter-pythagorean '((3 4 5) (4 6 8))):\n")
(display (filter-pythagorean '((3 4 5) (4 6 8))))
(display "\n(filter-pythagorean '((3 4 5) (13 18 30) (5 12 13) (8 8 8))):\n")
(display (filter-pythagorean '((3 4 5) (13 18 30) (5 12 13) (8 8 8))))
(display "\n(filter-pythagorean '(3 3 3))):\n")
(display (filter-pythagorean '((3 3 3))))
(display "\n(filter-pythagorean '())):\n")
(display (filter-pythagorean '()))
(display "\n(sort-area '((5 12 13) (3 4 5) (16 63 65) (12 35 37))):\n")
(display (sort-area '((5 12 13) (3 4 5) (16 63 65) (12 35 37))))
(display "\n(sort-area '((5 12 13) (16 63 65) (3 4 5))):\n")
(display (sort-area '((5 12 13) (16 63 65) (3 4 5))))
(display "\n\n\n\n MAIN TEST:\n")
(display "\n
(main-procedure '((5 12 13) (3 4 5) (16 63 65) (12 35 37) (1 1 1) (12 -3 7) (0 0 0) (12 2 4) (6 8 10) (3 4 5))):\n")
(display (main-procedure '((5 12 13) (3 4 5) (16 63 65) (12 35 37) (1 1 1) (12 -3 7) (0 0 0) (12 2 4) (6 8 10) (3 4 5))))
;(display "main-procedure '()):\n")
;(display (main-procedure '()))

(display "\n nameless tests:\n")
(display (check-triple? '((0 1 2))))
(newline)
(display (check-triple? '((0 -1 2))))
(newline)
;(display (check-triple? 'a))
(newline)
;(display (main-procedure 'a))
(newline)
;(display (main-procedure 2))
(newline)
;(display (check-length? 'a 0))
;(newline)
;(display (check-length? '() -3))
(newline)
(display (check-length? '(31) 999))
(newline)
;(display (check-sides? 'a))
(newline)
(display (check-sides? '(1 1 1 1 1 1)))
(newline)
(display (check-sides? '()))
(display (check-sides? '(3.3 3.4. 3.3)))
(newline)
(display (sort-all-triples '()))
(newline)
(display (sort-all-triples '(())))
(newline)
(display (sort-all-triples '((1 1 1 -1))))
(newline)
;(display (sort-all-triples 'a))
(newline)
;(display (sort-all-triples '('a)))
(newline)
;(display (sort-all-triples '(('a 3))))
(newline)
(display (sort-triple '()))
(newline)
;(display (sort-triple 'a))
(newline)
;(display (sort-triple '('a)))
;(display (filter-triangle '(2)))
(newline)
(display (filter-triangle '((3.4 4.5 3.2))))
(newline)
(display (triangle? '(3.4 4.5 3.2)))
(newline)
(display (triangle? '(3.4 4.5 3.2 4 4 5)))
(newline)
(display (triangle? '(3.4)))
(newline)
(display (filter-pythagorean '()))
(newline)
;(display (filter-pythagorean '('a)))
(newline)
;(display (filter-pythagorean '(('a))))
(newline)
(display (filter-pythagorean '((3.3 5.4 3.4))))
(newline)
(display (filter-pythagorean '((3/2 4 5/2))))
(newline)
(display (filter-pythagorean '((3 4 5))))
(newline)
(display (filter-pythagorean '((3 4 0))))
(newline)
(display (filter-pythagorean '((4 3 5))))
(newline)
;(display  (get-area ('a 3 4)))
(newline)
(display  (get-area '(4 5 3 4)))
(newline)
(display (get-area '(0 0 0 0)))
(newline)
;(display (get-area '()))
(display (sort-area '((3 4 5) (0 0 0) (-3 4 5))))
(display "\nTESTS PASSED\n")
